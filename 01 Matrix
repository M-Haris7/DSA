NOTE: HERE WE ARE USING BFS FROM 0 -> 1 AS IT IS OPTIMAL AS LESS BFS CALLS ARE HIT BECOZ IF WE HIT BFS FROM 1 -> 0 THEN TONS OF BFS ARE HIT


class Solution {
public:
    int m,n;
    vector<vector<int>> updateMatrix(vector<vector<int>>& mat) {
        m = mat.size();
        n = mat[0].size();
        vector<vector<int>> directions{{0,1},{0,-1},{1,0},{-1,0}};
        queue<pair<int, int>> q;
        vector<vector<int>> ans(m, vector<int>(n, -1));

        for(int i=0; i<m; i++)
        {
            for(int j=0; j<n; j++)
            {
                if(mat[i][j] == 0)
                {
                    ans[i][j] = 0;
                    q.push({i, j});
                }
            }
        }

        while(!q.empty())
        {
            pair<int, int> p = q.front();
            q.pop();
            int i = p.first;
            int j = p.second;

            for(auto &d : directions)
            {
                int new_i = i + d[0];
                int new_j = j + d[1];
                if(new_i >= 0 && new_i < m && new_j >= 0 && new_j < n && ans[new_i][new_j] == -1)
                {
                    ans[new_i][new_j] = ans[i][j] + 1;
                    q.push({new_i, new_j});
                }
            }
        }

        return ans;

    }
};
