class Solution {
public:
    int numBusesToDestination(vector<vector<int>>& routes, int source, int target) {
        if(source == target)
        {
            return 0;
        }

        unordered_map<int, vector<int>> adjMap; // key = stops, value = route indices

        for(int route=0; route<routes.size(); route++)
        {
            for(auto& stop : routes[route])
            {
                adjMap[stop].push_back(route);
            }
        }

        vector<bool> visited(501, false); // max routes are 500
        queue<int> q;

        // pushing all routes indices that contains source into queue & marking them visited
        for(auto& route : adjMap[source])
        {
            q.push(route);
            visited[route] = true;
        }

        int bus = 1;
        while(!q.empty())
        {
            int size = q.size();

            while(size--)
            {
                int route = q.front();
                q.pop();

                for(auto& stop : routes[route])
                {
                    if(stop == target)
                    {
                        return bus;
                    }

                    for(auto& nextRoute : adjMap[stop])
                    {
                        if(visited[nextRoute] == false)
                        {
                            visited[nextRoute] = true;
                            q.push(nextRoute);
                        }
                    }
                }
            }

            bus++;
        }

        return -1;
    }
};
