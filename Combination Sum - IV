class Solution {
public:
    int dp[201][1001];

    int combos(int i, vector<int>& nums, int target)
    {
        if(target == 0)
        {
            return 1;
        }
        if(target < 0 || i >= nums.size())
        {
            return 0;
        }

        if(dp[i][target] != -1)
        {
            return dp[i][target];
        }

    //NOTE: here after taking next element we can also take the previous element such that our target becomes 0, hence backtracking
        int take = combos(0, nums, target-nums[i]);
        int next = combos(i+1, nums, target);

        return dp[i][target] = take + next;
    }

    int combinationSum4(vector<int>& nums, int target) {
        int i = 0;
        memset(dp, -1, sizeof(dp));
        int ans = combos(0, nums, target);
        return ans;
    }
};
