/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int ans;

    int findSum(TreeNode* root, int& count)
    {
        if(!root)
        {
            return 0;
        }

        count++;

        int leftSum = findSum(root->left, count);
        int rightSum = findSum(root->right, count);

        return leftSum + rightSum + root->val;
    }

    void DFS(TreeNode* node)
    {
        if(!node)
        {
            return;
        }

        int count = 0;
        int sum = findSum(node, count);

        if(node->val == sum/count)
        {
            ans++;
        }
        
        DFS(node->left);
        DFS(node->right);
    }

    int averageOfSubtree(TreeNode* root) {
        ans = 0;

        DFS(root);

        return ans;
    }
};
