class Solution {
public:
    int MOD = 1e9+7;
    int a = 0, e = 1, i = 2, o = 3, u = 4;
    vector<vector<long long>> dp;

    long long count(int ch, int n)
    {
        if(n == 0)
        {
            return 1;
        }

        if(dp[ch][n] != -1)
        {
            return dp[ch][n];
        }

        if(ch == a)
        {
            return dp[ch][n] = count(e, n-1) % MOD;
        }
        else if(ch == e)
        {
            return dp[ch][n] = (count(a, n-1) + count(i, n-1)) % MOD;
        }
        else if(ch == i)
        {
            return dp[ch][n] = (count(a, n-1) + count(e, n-1) + count(o, n-1) + count(u, n-1)) % MOD;
        }
        else if(ch == o)
        {
            return dp[ch][n] = (count(i, n-1) + count(u, n-1)) % MOD;
        }
        else
        {
            return dp[ch][n] = count(a, n-1) % MOD;
        }

        return dp[ch][n] = 0;
    }

    int countVowelPermutation(int n) {
        dp.resize(5, vector<long long>(n+1, -1));
        long ans = 0;

        ans = (ans + count(a, n-1)) % MOD;
        ans = (ans + count(e, n-1)) % MOD;
        ans = (ans + count(i, n-1)) % MOD;
        ans = (ans + count(o, n-1)) % MOD;
        ans = (ans + count(u, n-1)) % MOD;

        return ans;
    }
};
