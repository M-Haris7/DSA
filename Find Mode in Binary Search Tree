/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void DFS(TreeNode* node, unordered_map<int, int>& umap)
    {
        if(!node)
        {
            return;
        }

        umap[node->val]++;
        DFS(node->left, umap);
        DFS(node->right, umap);
    }
    vector<int> findMode(TreeNode* root) {
        
        unordered_map<int, int> umap;
        DFS(root, umap);
        vector<int> mode;
        int maxFreq = 0;

        for(auto& pair : umap)
        {
            if(pair.second > maxFreq)
            {
                maxFreq = pair.second;
            }
        }
        
        for(auto& pair : umap)
        {
            if(pair.second == maxFreq)
            {
                mode.push_back(pair.first);
            }
        }

        return mode;
    }
};
