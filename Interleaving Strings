APPROACH 1: USING 3 VARIABLE MEMOIZATION
TC: O(n * m * N)

class Solution {
public:
    int m, n, N;
    int dp[101][101][201];
    bool solve(int i, int j, int k, string& s1, string& s2, string& s3)
    {
        if(i == n && j == m && k == N)
        {
            return true;
        }
        if(k >= N)
        {
            return false;
        }
        if(dp[i][j][k] != -1)
        {
            return dp[i][j][k];
        }
        bool ans = false;
        if(s1[i] == s3[k])
        {
            ans = solve(i+1, j, k+1, s1, s2, s3);
        }
        if(ans) 
        {
            return dp[i][j][k] = ans;
        }
        if(s2[j] == s3[k])
        {
            ans = solve(i, j+1, k+1, s1, s2, s3);
        }
        return dp[i][j][k] = ans;
    }

    bool isInterleave(string s1, string s2, string s3) {
        n = s1.length();
        m = s2.length();
        N = s3.length();
        memset(dp, -1, sizeof(dp));
        return solve(0, 0, 0, s1, s2, s3);
    }
};


APPRAOCH 2: USING 2 VARIABLE DP
TC: O(n*m)

class Solution {
public:
    int m, n, N;
    int dp[101][101];
    bool solve(int i, int j, string& s1, string& s2, string& s3)
    {
        if(i == n && j == m && i+j == N)
        {
            return true;
        }
        if(i+j >= N)
        {
            return false;
        }
        if(dp[i][j] != -1)
        {
            return dp[i][j];
        }
        bool ans = false;
        if(s1[i] == s3[i+j])
        {
            ans = solve(i+1, j, s1, s2, s3);
        }
        if(ans) 
        {
            return dp[i][j] = ans;
        }
        if(s2[j] == s3[i+j])
        {
            ans = solve(i, j+1, s1, s2, s3);
        }
        return dp[i][j] = ans;
    }

    bool isInterleave(string s1, string s2, string s3) {
        n = s1.length();
        m = s2.length();
        N = s3.length();
        memset(dp, -1, sizeof(dp));
        return solve(0, 0, s1, s2, s3);
    }
};
