class Solution {
public:
    bool canEatAll(vector<int>& piles, int mid, int h)
    {
        long actualHours=0;
        if(mid==0) return false;
        for(int &i : piles)
        {
            actualHours+=i/mid;
            if(i%mid != 0)
            {
                actualHours++;
            }
        }
        return actualHours<=h;

    }
    int minEatingSpeed(vector<int>& piles, int h) {
        int n=piles.size();
        int lo=0, hi=*max_element(begin(piles), end(piles));
        while(lo<hi)
        {
            int mid=lo+((hi-lo)/2);
            if(canEatAll(piles, mid, h))
            {
                hi=mid;
            }
            else
            {
                lo=mid+1;
            }
        }
        return lo;
        
    }
};
