class Solution {
public:
    int largestRectangleArea(vector<int>& heights) {
        int n = heights.size();
        vector<int> nse(n);   // next smaller element
        vector<int> pse(n);   // prev smaller element
        stack<int> st;
        st.push(0);
        // for nse
        for(int i=1; i<n; i++)
        {
            while(!st.empty() && heights[i] < heights[st.top()])
            {
                nse[st.top()] = i;
                st.pop();
            }
            st.push(i);
        }
        // for elements that don't have nse
        while(!st.empty())
        {
            nse[st.top()] = n;
            st.pop();
        }

        // for pse (we don't need another stack for pse as we have already emptied it above)
        st.push(n-1);
        for(int i=n-2; i>=0; i--)
        {
            while(!st.empty() && heights[i] < heights[st.top()])
            {
                pse[st.top()] = i;
                st.pop(); 
            }
            st.push(i);
        }
        // for elements that don't have pse
        while(!st.empty())
        {
            pse[st.top()] = -1;
            st.pop();
        } 

        int ans = 0;
        for(int i=0; i<n; i++)
        {
            ans = max(ans, heights[i] * (nse[i] - pse[i] - 1));
        }
        return ans;
    }
};
