APPROACH 1: USING HASH MAP   TC=O(N)   SC=O(N)

class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        int n = nums.size();
        int limit = (int)(floor(n)/3);

        unordered_map<int,int> umap;

        for(auto x : nums)
        {
            umap[x]++;
        }

        vector<int> elements;
        for(int i=0; i<n; ++i)
        {
            if(umap[nums[i]] > limit)
            {
                elements.push_back(nums[i]);
                umap.erase(nums[i]);
            }
        }

        return elements;
    }
};

APPROACH 2: USING MOORE'S MAJORITY ALGORITHM    TC+O(N)  SC=O(1)

class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        int n = nums.size();
        int limit = n/3;

        int majority1 = INT_MIN, majority2 = INT_MIN;
        int count1 = 0, count2 = 0;

        for(int ele : nums)
        {
            if(majority1 == ele)
            {
                count1++;
            }
            else if(majority2 == ele)
            {
                count2++;
            }
            else if(count1 == 0)
            {
                majority1 = ele;
                count1 = 1;
            }
            else if(count2 == 0)
            {
                majority2 = ele;
                count2 = 1;
            }
            else
            {
                count1--;
                count2--;
            }
        }

        vector<int> ans;
        count1 = 0;
        count2 = 0;
        for(int i=0; i<n; i++)
        {
            if(nums[i] == majority1)
            {
                count1++;
            }
            else if(nums[i] == majority2)
            {
                count2++;
            }
        }

        //cout << majority1 << " " << majority2 << endl;

        if(count1 > limit)
        {
            ans.push_back(majority1);
        }
        if(count2 > limit)
        {
            ans.push_back(majority2);
        }

        return ans;
    }
};
