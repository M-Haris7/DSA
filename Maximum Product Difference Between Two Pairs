APPROACH 1: SORT
class Solution {
public:
    int maxProductDifference(vector<int>& nums) {
        int n = nums.size();
        sort(nums.begin(), nums.end());

        int w = nums[0];
        int x = nums[1];
        int y = nums[n-2];
        int z = nums[n-1];

        return (y * z) - (w * x);
    }
};

APPROACH 2: WITHOUT SORT   TC = O(N)  
class Solution {
public:
    int maxProductDifference(vector<int>& nums) {
        int max1 = 0;
        int max2 = 0;
        int min1 = INT_MAX;
        int min2 = INT_MAX;

        for(int i=0; i<nums.size(); i++)
        {
            if(nums[i] > max1)
            {
                max2 = max1;
                max1 = nums[i];
            }
            else
            {
                max2 = max(nums[i], max2);
            }

            if(nums[i] < min1)
            {
                min2 = min1;
                min1 = nums[i];
            }
            else
            {
                min2 = min(nums[i], min2);
            }
        }

        return (max1 * max2) - (min1 * min2);
    }
};
