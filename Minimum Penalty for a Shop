USING PREFIX AND SUFFIX SUM
TC = O(N)  SC = O(N)

class Solution {
public:
    int bestClosingTime(string customers) {
        int n = customers.length();
        vector<int> prefixN(n+1, 0); // for storing no. of N's if shop is open
        prefixN[0] = 0;
        vector<int> suffixY(n+1, 0); // for storing no. of Y's if shop is closed
        suffixY[n] = 0;

        // for counting N's
        for(int i=1; i<=n; i++)
        {
            if(customers[i-1] == 'N')
            {
                prefixN[i] = prefixN[i-1] + 1;
            }
            else
            {
                prefixN[i] = prefixN[i-1];
            }
        }

        // for counting Y's
        for(int i=n-1; i>=0; i--)
        {
            if(customers[i] == 'Y')
            {
                suffixY[i] = suffixY[i+1] + 1;
            }
            else
            {
                suffixY[i] = suffixY[i+1];
            }
        }

        int minPenalty, minHour = INT_MAX;
        for(int i=0; i<=n; ++i)
        {
            int currPenalty = prefixN[i] + suffixY[i];
            if(currPenalty < minPenalty)
            {
                minPenalty = currPenalty;
                minHour = i;
            }
        }
        return minHour;
    }
};

USING 2 PASS METHOD    TC: O(N)   SC: O(1)
