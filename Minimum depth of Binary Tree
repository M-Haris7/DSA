/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int minDepth(TreeNode* root) {
        if(!root) return 0;
        if(!root->left && !root->right)  return 1;
        if(!root->left) return 1 + minDepth(root->right);
        if(!root->right) return 1 + minDepth(root->left);
        int LST = minDepth(root->left);
        int RST = minDepth(root->right);
        return 1 + min(LST, RST);
    }
};



Let's break down the code step-by-step:

1. `int minDepth(TreeNode* root)`: This is the function definition that takes a pointer to the root of the binary tree
as input and returns an integer (the minimum depth).

2. `if (!root) return 0;`: This is the base case that handles an empty tree or a situation where the current node 
is a null pointer. In such cases, the minimum depth is 0.

3. `if (!root->left && !root->right) return 1;`: This checks if the current node has no left child and no right child, 
indicating that it is a leaf node. In this case, the minimum depth is 1.

4. `if (!root->left) return 1 + minDepth(root->right);`: If the current node has no left child, the function calculates 

the minimum depth of the right subtree and adds 1 to it to account for the current node.

5. `if (!root->right) return 1 + minDepth(root->left);`: If the current node has no right child, the function calculates 
the minimum depth of the left subtree and adds 1 to it to account for the current node.

6. `int LST = minDepth(root->left); int RST = minDepth(root->right);`: If the current node has both left and right children, 
the function calculates the minimum depth of both subtrees and stores the results in `LST` and `RST`.

7. `return 1 + min(LST, RST);`: Finally, the function returns the minimum of `LST` and `RST` and adds 1 to it to account for the current node.

The function effectively traverses the binary tree recursively while calculating the minimum depth from the root to 
the leaf nodes and backtracks when reaching leaf nodes or nodes with only one child. It uses a divide-and-conquer approach to find the minimum depth of the tree efficiently.
