class Solution {
public:
    int MOD = 1e9 + 7;
    int dp[51][51][51];
    int totalPaths(int m, int n, int maxMove, int r, int c)
    {
        if(r >= m || r < 0 || c >= n || c < 0)
        {
            return 1;
        }
        if(maxMove <= 0)
        {
            return 0;
        } 
        if(dp[r][c][maxMove] != -1)
        {
            return dp[r][c][maxMove];
        }

        int ans = 0;

        ans = (ans + totalPaths(m, n, maxMove-1, r+1, c)) % MOD;
        ans = (ans + totalPaths(m, n, maxMove-1, r-1, c)) % MOD;
        ans = (ans + totalPaths(m, n, maxMove-1, r, c+1)) % MOD;
        ans = (ans + totalPaths(m, n, maxMove-1, r, c-1)) % MOD;
        
        return dp[r][c][maxMove] = ans;
    }
    int findPaths(int m, int n, int maxMove, int startRow, int startColumn) {
        memset(dp, -1, sizeof(dp));
        return totalPaths(m, n, maxMove, startRow, startColumn);
    }
};
