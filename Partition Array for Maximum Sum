class Solution {
public:
    int n;
    int dp[501];
    int getMax(int i, vector<int>& arr, int k)
    {
        if(i >= n)
        {
            return 0;
        }

        if(dp[i] != -1)
        {
            return dp[i];
        }

        int ans = 0;
        int currMax = -1;
        for(int j=i; j<n && j-i+1<=k; j++)
        {
            currMax = max(currMax, arr[j]);
            ans = max(ans, ((j-i+1) * currMax) + getMax(j+1, arr, k)); 
        }

        return dp[i] = ans;
    }

    int maxSumAfterPartitioning(vector<int>& arr, int k) {
        n = arr.size();
        memset(dp, -1, sizeof(dp));
        return getMax(0, arr, k);
    }
};
