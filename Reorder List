/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    void reorderList(ListNode* head) {
        ListNode* slow = head;
        ListNode* fast = head->next;
        //find the mid of LL
        while(fast && fast->next)
        {
            slow = slow->next;
            fast = fast->next->next;
        }
        //reversing the 2nd portion of LL
        ListNode* second = slow->next;
        slow->next = NULL;
        ListNode* prev = NULL;
        ListNode* temp;
        while(second)
        {
            temp = second->next;
            second->next = prev;
            prev = second;
            second = temp;
        }
        //Merging 2 LL
        while(prev)
        {
            ListNode* left = head->next;
            ListNode* right = prev->next;
            head->next = prev;
            prev->next = left;
            prev = right;
            head = left;
        }
    }
};
