/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* midElement(ListNode* head)
    {
        ListNode* slow = head;
        ListNode* fast = head;
        while(fast->next != NULL && fast->next->next != NULL)
        {
            slow = slow->next;
            fast = fast->next->next;
        }
        return slow;
    }

    //Merging 2 sorted list
    ListNode* mergeSortedList(ListNode* p1, ListNode* p2)
    {
        if(p1 == NULL || p2 == NULL)
        return (p1 == NULL) ? p2 : p1;

        ListNode* ans = new ListNode(0);
        ListNode* ptr = ans;
        while(p1 != NULL && p2 != NULL)
        {
            if(p1->val < p2->val)
            {
                ptr->next = p1;
                p1 = p1->next;
            }
            else
            {
                ptr->next = p2;
                p2 = p2->next;
            }
            ptr = ptr->next;
        }

        if(p1 != NULL)
        {
            ptr -> next = p1;
            p1 = p1->next;
        }
        
        if(p2 != NULL)
        {
            ptr -> next = p2;
            p2 = p2 ->next;
        }

        
        return ans->next;
        
    }

    ListNode* sortList(ListNode* head) {
        // using Merge sort
        if(head == NULL || head->next == NULL)
        return head;
        //Splitting the list using middle element
        ListNode* mid = midElement(head);
        ListNode* newHead = mid->next;
        mid->next = NULL;

        ListNode* left_half = sortList(head);
        ListNode* right_half = sortList(newHead);

        return mergeSortedList(left_half, right_half);

    }
};
