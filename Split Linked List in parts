TC = O(K + L)  where K is number of times we are inserting nodes and L is number of nodes we are inserting.
NOTE: Here we are touching each node only once therefore TC is linear not quardratic.

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    vector<ListNode*> splitListToParts(ListNode* head, int k) {
        int len = 0;
        for(ListNode* curr=head; curr!=NULL; curr=curr->next)
        {
            len++;
        }

        int parts = len / k;
        int extra = len % k;

        vector<ListNode*> ans(k, NULL);
        ListNode* curr = head;
        ListNode* prev = NULL;
        for(int i=0; curr != NULL && i<k; i++)
        {
            ans[i] = curr;
            for(int c=1; c<=parts + (extra>0 ? 1 : 0); c++)
            {
                prev = curr;
                curr = curr->next;
            }
            prev->next = NULL;
            extra--;
        }
        return ans;

    }
};
