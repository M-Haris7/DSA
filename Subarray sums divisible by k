class Solution {
public:
    int subarraysDivByK(vector<int>& nums, int k) {
        int res = 0;    // to store count of subarray
        int sum = 0;    // to store prefix sum
        unordered_map<int,int> mp;
        mp[0] = 1;      // for rem 0 count will be 1

        //prefix sum
        for(int i=0; i<nums.size(); i++)
        {
            sum += nums[i];
            int rem = sum % k;
            // edge case: if rem is -ve add +k to rem
            if(rem < 0)
            {
                rem += k;
            }
            // if count of rem is found add count to res
            if(mp.find(rem) != mp.end())
            {
                res += mp[rem];
            }
            mp[rem]++;
        }
        return res;
    }
};
