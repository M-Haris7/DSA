USING RECURSION
class Solution {
public:
    int m, n;
    int ways(int r, int c, vector<vector<int>>& grid)
    {
        // if the destination cell itself has an obstacle
        if(r == m-1 && c== n-1 && grid[r][c] == 1) return 0;
        // when we rach the destination
        if(r == m-1 && c == n-1) return 1;
        // when indexOutOfBounds or we face an obstacle
        if(r >= m || c >= n || grid[r][c] == 1) return 0;
        int right = ways(r, c+1, grid);
        int left = ways(r+1, c, grid);
        return right + left;
    }

    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        m = obstacleGrid.size();
        n = obstacleGrid[0].size();
        return ways(0, 0, obstacleGrid);
    }
};

USING DP:
class Solution {
public:
    int m, n;
    int dp[101][101];
    int ways(int r, int c, vector<vector<int>>& grid)
    {
        // if the destination cell itself has an obstacle
        if(r == m-1 && c== n-1 && grid[r][c] == 1) return 0;
        // when we rach the destination
        if(r == m-1 && c == n-1) return 1;
        // when indexOutOfBounds or we face an obstacle
        if(r >= m || c >= n || grid[r][c] == 1) return 0;
        // memoization
        if(dp[r][c] != -1)
        {
            return dp[r][c];
        }
        int right = ways(r, c+1, grid);
        int left = ways(r+1, c, grid);
        return dp[r][c] = right + left;
    }

    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        m = obstacleGrid.size();
        n = obstacleGrid[0].size();
        memset(dp, -1, sizeof(dp));
        return ways(0, 0, obstacleGrid);
    }
};
