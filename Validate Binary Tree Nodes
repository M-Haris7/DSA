class Solution {
public:
    bool validateBinaryTreeNodes(int n, vector<int>& leftChild, vector<int>& rightChild) {
        vector<int> parents(n, 0);
        int edges = 0;

        // Calculate in-degrees of each node and check for multiple parents
        for(int i=0; i<n; ++i)
        {
            if(leftChild[i] != -1)
            {
                parents[leftChild[i]]++;
                if(parents[leftChild[i]] > 1)
                {
                    return false;
                }
                edges++;
            }
            if(rightChild[i] != -1)
            {
                parents[rightChild[i]]++;
                if(parents[rightChild[i]] > 1)
                {
                    return false;
                }
                edges++;
            }
        }

        // The count of edges should be n-1.
        if(edges != n-1)
        {
            return false;
        }

        // Find the root of the tree (a valid binary tree has exactly one root)
        int root = -1;
        for(int i=0; i<n; ++i)
        {
            if(parents[i] == 0)
            {
                if(root == -1)
                {
                    root = i;
                }
                else
                {
                    return false;
                }
            }
        }

        // Perform a breadth-first search to check the visited node count.
        queue<int> q;
        q.push(root);

        int visited = 0;

        while(!q.empty())
        {
            int node = q.front();
            q.pop();
            visited++;
            if(leftChild[node] != -1)
            {
                q.push(leftChild[node]);
            }
            if(rightChild[node] != -1)
            {
                q.push(rightChild[node]);
            }
        }

        return (visited == n);
    }
};
